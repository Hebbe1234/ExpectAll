import networkx as nx
import matplotlib.pyplot as plt

# Define the graph data
data = {
"33837634": [125, "F", "T"],
"35433954": [124, 33837634, "T"],
"34942722": [123, 35433954, "T"],
"34870594": [122, 34942722, "T"],
"35254114": [121, "T", 34870594],
"34956354": [120, 35254114, "T"],
"34553026": [119, "T", 34956354],
"34938306": [118, 34553026, "T"],
"35422146": [117, 34938306, "T"],
"35088162": [116, 35422146, "T"],
"35067106": [115, "T", 35088162],
"34359394": [101, 35067106, "T"],
"35437314": [100, 34359394, "T"],
"35440898": [99, 35437314, "T"],
"34924610": [98, 35440898, "T"],
"35394370": [97, 34924610, "T"],
"34904642": [96, "T", 35394370],
"35253154": [95, 34904642, "T"],
"35279554": [87, "T", 35253154],
"34652866": [86, 35279554, "T"],
"35333890": [119, 34956354, "T"],
"35254722": [118, "T", 35333890],
"35417314": [117, 35254722, "T"],
"34507682": [116, 35417314, "T"],
"34359426": [115, 34507682, "T"],
"35254242": [101, 34359426, "T"],
"34384130": [100, 35254242, "T"],
"35136674": [99, 34384130, "T"],
"34932674": [98, 35136674, "T"],
"34397954": [97, 34932674, "T"],
"35259618": [96, "T", 34397954],
"35233986": [95, "T", 35259618],
"34554754": [87, "T", 35233986],
"35259042": [86, 34554754, "T"],
"35425666": [85, 34652866, 35259042],
"35435554": [84, "T", 35425666],
"35139618": [83, 35435554, "T"],
"35399074": [82, 35139618, "T"],
"35065410": [81, 35399074, "T"],
"35367842": [80, "T", 35065410],
"35367874": [79, "T", 35367842],
"35139682": [95, 35394370, "T"],
"35257858": [87, 35139682, "T"],
"35256258": [96, 35394370, "T"],
"35355522": [95, 35256258, "T"],
"34957058": [87, 35139682, 35355522],
"35069346": [86, 35257858, 34957058],
"35090274": [115, 35088162, "T"],
"35279778": [101, "T", 35090274],
"35068514": [100, 35279778, "T"],
"35089890": [99, 35068514, "T"],
"35142722": [98, 35089890, "T"],
"34984290": [97, 35142722, "T"],
"34345730": [96, 34984290, "T"],
"35425794": [95, 34345730, 35259618],
"35290210": [87, 35425794, "T"],
"35437954": [95, 34345730, "T"],
"34551714": [87, 35425794, 35437954],
"35066370": [86, 35290210, 34551714],
"35062978": [85, 35069346, 35066370],
"35439138": [84, "T", 35062978],
"34369666": [83, 35439138, "T"],
"34652226": [82, 34369666, "T"],
"34961762": [81, 34652226, "T"],
"35367778": [80, "T", 34961762],
"35281346": [86, 35257858, "T"],
"34395138": [87, "T", 35437954],
"35364130": [86, 34395138, 34554754],
"34653346": [85, 35281346, 35364130],
"35177890": [84, "T", 34653346],
"35427394": [83, 35177890, "T"],
"35422274": [82, 35427394, "T"],
"35069602": [81, 35422274, "T"],
"35251618": [80, "T", 35069602],
"35367810": [79, 35367778, 35251618],
"35367906": [78, 35367874, 35367810],
"35367938": [77, 35367906, "T"],
"35367970": [76, "T", 35367938],
"34358338": [79, 35251618, "T"],
"35367682": [78, "T", 34358338],
"35367714": [77, 35367682, "T"],
"35367746": [76, 35367714, "T"],
"35368002": [75, 35367970, 35367746],
"35368034": [74, 35368002, "T"],
"35368066": [73, 35368034, "T"],
"35368098": [72, 35368066, "T"],
"35368130": [71, 35368098, "T"],
"35368162": [70, "T", 35368130],
"35368194": [69, "T", 35368162],
"35368226": [68, "T", 35368194],
"35368258": [67, 35368226, "T"],
"35368290": [66, 35368258, "T"],
"35368322": [65, 35368290, "T"],
"35368386": [59, "T", 35368322],
"35368418": [58, "T", 35368386],
"35368450": [57, "T", 35368418],
"35368514": [56, 35368450, "T"]
}

# Create a directed graph
G = nx.DiGraph()

# Add nodes and edges to the graph
for node, values in data.items():
    if len(values) > 1 and isinstance(values[1], int):
        G.add_edge(str(values[1]), node, style="dotted")
    if len(values) > 2 and isinstance(values[2], int):
        G.add_edge(node, str(values[2]))
        print("j")

# Define node positions using spring layout
pos = nx.spring_layout(G)

# Draw the graph
plt.figure(figsize=(12, 8))  # Adjust figure size as needed
nx.draw_networkx(G, pos, with_labels=True, node_size=10, node_color="skyblue", font_size=8, arrowsize=10, edge_color='black', style='dotted')
plt.title("Directed Graph")
plt.show()